{"version":3,"file":"2-form.js","sources":["../src/js/2-form.js"],"sourcesContent":["//Оголоси поза будь-якими функціями об’єкт formData з полями email та message, які спочатку мають порожні рядки як значення: { email: \"\", message: \"\" }.\n// Використовуй метод делегування для відстеження змін у формі через подію input. Зберігай актуальні дані з полів email та message у formData та записуй цей об’єкт у локальне сховище. Використовуй ключ \"feedback-form-state\" для зберігання даних у сховищі.\n// При завантаженні сторінки перевір, чи є дані у локальному сховищі. Якщо так, використовуй їх для заповнення форми та об'єкта formData. Якщо ні, залиш поля форми порожніми.\n// Перед відправленням форми переконайся, що обидва поля форми заповнені. Якщо будь-яке з полів (властивостей об’єкта formData) порожнє, показуй сповіщення з текстом «Fill please all fields». Якщо всі поля заповнені, виведи у консоль об’єкт formData з актуальними значеннями, очисти локальне сховище, об’єкт formData і поля форми.\n\nconst formData = {\n    email: \"\",\n    message: \"\"\n}\n\nconst localStorageKey = \"feedback-form-state\";\nconst savedFormData = localStorage.getItem(localStorageKey);\n\nconst feedbackForm = document.querySelector('.feedback-form');\n\nfeedbackForm.addEventListener('input', handleInput);\nfeedbackForm.addEventListener('submit', handleSubmit);\n\n\nif (savedFormData) {\n    const parsedData = JSON.parse(savedFormData);\n\n    formData.email = parsedData.email ?? '';\n    formData.message = parsedData.message ?? '';\n\n    feedbackForm.elements.email.value = parsedData.email ?? '';\n    feedbackForm.elements.message.value = parsedData.message ?? '';\n}\n\nfunction handleInput() {\n    const { email, message } = feedbackForm.elements;\n\n    formData.email = email.value.trim();\n    formData.message = message.value.trim();\n\n    localStorage.setItem(localStorageKey, JSON.stringify(formData));\n}\n\nfunction handleSubmit(event) {\n    event.preventDefault();\n    const form = event.target;\n    const email = form.elements.email.value;\n    const message = form.elements.message.value;\n\n    if (!email || !message) {\n        alert('Fill please all fields');\n        return\n    }\n    console.log('formData:', formData);\n\n    localStorage.removeItem(localStorageKey)\n    form.reset()\n\n    formData.email = '';\n    formData.message = '';\n\n    console.log('formData:', formData);\n}\n"],"names":["formData","localStorageKey","savedFormData","feedbackForm","handleInput","handleSubmit","parsedData","email","message","event","form"],"mappings":"wFAKA,MAAMA,EAAW,CACb,MAAO,GACP,QAAS,EACb,EAEMC,EAAkB,sBAClBC,EAAgB,aAAa,QAAQD,CAAe,EAEpDE,EAAe,SAAS,cAAc,gBAAgB,EAE5DA,EAAa,iBAAiB,QAASC,CAAW,EAClDD,EAAa,iBAAiB,SAAUE,CAAY,EAGpD,GAAIH,EAAe,CACf,MAAMI,EAAa,KAAK,MAAMJ,CAAa,EAE3CF,EAAS,MAAQM,EAAW,OAAS,GACrCN,EAAS,QAAUM,EAAW,SAAW,GAEzCH,EAAa,SAAS,MAAM,MAAQG,EAAW,OAAS,GACxDH,EAAa,SAAS,QAAQ,MAAQG,EAAW,SAAW,EAChE,CAEA,SAASF,GAAc,CACnB,KAAM,CAAE,MAAAG,EAAO,QAAAC,GAAYL,EAAa,SAExCH,EAAS,MAAQO,EAAM,MAAM,KAAI,EACjCP,EAAS,QAAUQ,EAAQ,MAAM,KAAI,EAErC,aAAa,QAAQP,EAAiB,KAAK,UAAUD,CAAQ,CAAC,CAClE,CAEA,SAASK,EAAaI,EAAO,CACzBA,EAAM,eAAc,EACpB,MAAMC,EAAOD,EAAM,OACbF,EAAQG,EAAK,SAAS,MAAM,MAC5BF,EAAUE,EAAK,SAAS,QAAQ,MAEtC,GAAI,CAACH,GAAS,CAACC,EAAS,CACpB,MAAM,wBAAwB,EAC9B,MACH,CACD,QAAQ,IAAI,YAAaR,CAAQ,EAEjC,aAAa,WAAWC,CAAe,EACvCS,EAAK,MAAO,EAEZV,EAAS,MAAQ,GACjBA,EAAS,QAAU,GAEnB,QAAQ,IAAI,YAAaA,CAAQ,CACrC"}